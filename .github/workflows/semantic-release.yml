name: Semantic Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
      actions: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "repositoryUrl": "https://github.com/${{ github.repository }}.git",
            "tagFormat": "v${version}",
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              "@semantic-release/github",
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ]
            ]
          }
          EOF

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          # Create temporary file to store semantic-release output
          echo '{}' > semantic-output.json
          
          # Run semantic-release with output to JSON
          npx semantic-release --dry-run false --debug
          
          # Check if a new release was created
          if [ -f .git/refs/tags/v* ]; then
            # Get the latest tag which should be our new version
            version=$(git describe --tags --abbrev=0)
            # Remove the 'v' prefix if present
            clean_version=${version#v}
            echo "new_version=$clean_version" >> $GITHUB_OUTPUT
            echo "version_tag=$version" >> $GITHUB_OUTPUT
            echo "::notice::New version released: $version"
          else
            echo "::notice::No new version released."
          fi
          
      - name: Trigger Build and Publish with Semantic Version
        if: steps.semantic.outputs.new_version != ''
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: build-and-publish.yml
          inputs: '{"version": "${{ steps.semantic.outputs.new_version }}", "version_tag": "${{ steps.semantic.outputs.version_tag }}"}'
          token: ${{ secrets.GITHUB_TOKEN }}
